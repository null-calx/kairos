#+AUTHOR: calx

All blocks, except the first two, can be executed from inside of emacs
by pressing ~C-c C-c~, while being inside the code block.

* Variables

#+NAME: server
| admin       |
| istaroth.cc |

* Build server

** Update and upgrade

#+BEGIN_SRC sh :tangle build.sh :eval no
  sudo apt-get update -y
  sudo apt-get upgrade -y
#+END_SRC

** Install nginx

Documentation: [[https://nginx.org/en/linux_packages.html#Debian]]

#+BEGIN_SRC sh :tangle build.sh :eval no
  sudo apt-get install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring

  curl https://nginx.org/keys/nginx_signing.key \
      | gpg --dearmor \
      | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg > /dev/null

  echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
  http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx" \
      | sudo tee /etc/apt/sources.list.d/nginx.list > /dev/null

  echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" \
      | sudo tee /etc/apt/preferences.d/99nginx > /dev/null

  sudo apt-get update -y
  sudo apt-get install -y nginx
#+END_SRC

** Push changes

#+BEGIN_SRC sh :results file none :file install.out.txt :var REMOTE_USER=server[0] :var REMOTE_DOMAIN=server[1]
  REMOTE_ADDR=${REMOTE_USER}@${REMOTE_DOMAIN}

  THIS_FILE=build.org
  SCRIPT_FILE=build.sh

  set -euxo pipefail

  if [[ ! -f $SCRIPT_FILE ]] || [[ $SCRIPT_FILE -ot $THIS_FILE ]]; then
      echo Tangle the file first!
      echo Press C-c C-v t or C-c C-v C-t to tangle!
      exit 0
  fi

  scp ./$SCRIPT_FILE $REMOTE_ADDR:/home/$REMOTE_USER
  ssh $REMOTE_ADDR "bash /home/$REMOTE_USER/$SCRIPT_FILE"
#+END_SRC

* Setup nginx

#+BEGIN_SRC sh :results file none :file push-nginx.out.txt :var REMOTE_USER=server[0] :var REMOTE_DOMAIN=server[1]
  REMOTE_ADDR=${REMOTE_USER}@${REMOTE_DOMAIN}

  tar cf nginx.tar nginx
  gzip nginx.tar
  scp nginx.tar.gz $REMOTE_ADDR:/home/$REMOTE_USER
  rm nginx.tar.gz

  cat <<EOF | ssh $REMOTE_ADDR sudo -i
    cd /etc
    rm -rf nginx
    tar xf /home/$REMOTE_USER/nginx.tar.gz
    chown root:root -R nginx

    nginx -t 2>&1
    systemctl restart nginx
  EOF

#+END_SRC

* Setup SSL

** Certbot setup

#+BEGIN_SRC sh :results none
  python3 -m venv certbot
  source certbot/bin/activate
  pip install certbot certbot-dns-cloudflare
#+END_SRC

** Update certbot?

#+BEGIN_SRC sh :results none
  source certbot/bin/activate
  pip install -U certbot certbot-dns-cloudflare
#+END_SRC

** Create cloudflare token credentials file

#+BEGIN_SRC sh :results none
  umask 077
  sed -n 's/cloudflare_api_token/dns_cloudflare_api_token/p' ../tofu/terraform.tfvars > cert/cloudflare.ini
#+END_SRC

** Creating the certificate signing request

#+BEGIN_SRC sh :results file none :file ssl.out.txt
  openssl genrsa \
  	-out cert/istaroth.key 2048

  openssl req \
  	-new \
  	-key cert/istaroth.key \
  	-out cert/istaroth.csr \
  	-config cert/istaroth.conf
#+END_SRC

** Obtaining the keychain

#+BEGIN_SRC sh :results file none :file certbot.out.txt
  source certbot/bin/activate

  certbot certonly \
  	--csr cert/istaroth.csr \
  	--preferred-challenges dns \
  	--config-dir certbot \
  	--work-dir certbot \
  	--logs-dir certbot \
  	--dns-cloudflare \
  	--dns-cloudflare-credentials cert/cloudflare.ini \
  	--non-interactive \
  	--agree-tos

  mv 0000_cert.pem cert/cert.pem
  mv 0000_chain.pem cert/chain.pem
  mv 0001_chain.pem cert/fullchain.pem
#+END_SRC

** Push the keys

#+BEGIN_SRC sh :results file none :file push-ssl.out.txt :var REMOTE_USER=server[0] :var REMOTE_DOMAIN=server[1]
  REMOTE_ADDR=${REMOTE_USER}@${REMOTE_DOMAIN}

  tar cf cert.tar cert/fullchain.pem cert/istaroth.key
  gzip cert.tar
  scp cert.tar.gz $REMOTE_ADDR:/home/$REMOTE_USER
  rm cert.tar.gz

  cat <<EOF | ssh $REMOTE_ADDR sudo -i
    cd /etc
    rm -rf cert
    tar xf /home/$REMOTE_USER/cert.tar.gz
    chown root:root -R cert
  EOF
#+END_SRC
